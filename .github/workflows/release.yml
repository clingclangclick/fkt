name: "Release"

env:
  DOCKER_REPOSITORY: ghcr.io/${{ github.repository }}/fkt

on:
  pull_request:
    types:
    - closed

jobs:
  Changes:
    if: github.event_name == 'pull_request' && github.event.pull_request.merged
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
    outputs:
      tag_changed: ${{ steps.changed-files.outputs.doc_any_modified == 'true'|| steps.changed-files.outputs.build_any_modified == 'true' || steps.changed-files.outputs.other_any_modified == 'true'}}
      build_changed: ${{ steps.changed-files.outputs.build_any_modified == 'true' }}
      image_changed: ${{ steps.changed-files.outputs.build_any_modified == 'true' || steps.changed-files.outputs.other_any_modified == 'true' }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: ${{ github.event_name == 'pull_request' && 2 || 0 }}
        persist-credentials: true

    - name: Changed Files
      id: changed-files
      uses: tj-actions/changed-files@v40
      with:
        files_yaml: |
          doc:
            - '**/*.md'
            - README.md
            - LICENSE
          build:
            - go.mod
            - go.sum
            - '**/*.go'
            - 'vendor/**'
          other:
            - Dockerfile
            - action.yml
            - .pre-commit-hooks.yaml

  Tag:
    if: needs.Changes.outputs.tag_changed == 'true'
    runs-on: ubuntu-latest
    needs:
    - Changes
    permissions:
      contents: 'write'
    outputs:
      sha: ${{ steps.tag.outputs.sha }}
      tag: ${{ steps.tag.outputs.tag }}
      version: ${{ steps.tag.outputs.version }}
    steps:
    - name: SSH Deploy Key
      id: ssh-deploy-key
      env:
        HAS_SSH_DEPLOY_PRIVATE_KEY: ${{ secrets.SSH_DEPLOY_PRIVATE_KEY != '' }}
      shell: bash
      run: echo "has_ssh_deploy_private_key=${{ env.HAS_SSH_DEPLOY_PRIVATE_KEY }}" >> "$GITHUB_OUTPUT"

    - name: Checkout
      if: steps.ssh-deploy-key.outputs.has_ssh_deploy_private_key != 'true'
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true
        repository: ${{ github.event.pull_request.head.repo.full_name }}
        ref: main

    - name: Checkout
      if: steps.ssh-deploy-key.outputs.has_ssh_deploy_private_key == 'true'
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true
        persist-credentials: true
        ref: main
        repository: ${{ github.event.pull_request.head.repo.full_name }}
        ssh-key: ${{ secrets.SSH_DEPLOY_PRIVATE_KEY }}

    - name: Tag
      id: tag
      env:
        BODY: ${{ github.event.pull_request.body }}
        GH_TOKEN: ${{ github.token }}
        TITLE: ${{ github.event.pull_request.title }}
      shell: bash
      run: |
        set -euo pipefail
        set -x

        # Increment Tag Version
        # $1 - version (semver)
        # $2 - position
        increment_version() {
          local suffix="${1#"${1%%[+-]*}"}"
          local version="${1%"$suffix"}"
          local delimiter=.
          # shellcheck disable=SC2207
          local array=($(tr "$delimiter" '\n' <<< "$version"))
          array[$2]=$((array[$2]+1))
          if [ "$2" -lt 2 ]; then array[2]=0; fi
          if [ "$2" -lt 1 ]; then array[1]=0; fi
          echo "$(local IFS="$delimiter"; echo "${array[*]}")$suffix"
        }
        if [ "${{ contains(github.event.pull_request.labels.*.name, 'version-patch' )}}" == "true" ]; then
          POSITION=2
        elif [ "${{ contains(github.event.pull_request.labels.*.name, 'version-major' )}}" == "true" ]; then
          POSITION=0
        elif [ "${{ contains(github.event.pull_request.labels.*.name, 'version-minor' )}}" == "true" ]; then
          POSITION=1
        else
          POSITION=1
        fi

        git fetch --tags --force origin 'refs/tags/*:refs/tags/*'

        # Version sort is _not_ semver
        CURRENT_TAG="$(git tag -l "v*" 2>/dev/null | sort -Vr | head -n1)"
        CURRENT_VERSION="${CURRENT_TAG##v}"
        THIS_VERSION="$(increment_version "${CURRENT_VERSION:-0.0.0}" "$POSITION")"
        TAG_VERSION="v$THIS_VERSION"

        IMAGE="${DOCKER_REPOSITORY}:${THIS_VERSION}"
        export IMAGE
        yq '.runs.image = "docker://" + env(IMAGE)' -i action.yml 2>&1
        yq '.[0].entry = env(IMAGE)' -i .pre-commit-hooks.yaml 2>&1

        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config user.name "github-actions[bot]"
        git config --global --add safe.directory "."
        git add action.yml .pre-commit-hooks.yaml
        git commit --amend --no-edit 2>&1

        SHA="$(git rev-parse HEAD)"
        git tag -a -m "$TITLE" -m "$BODY" "$TAG_VERSION" "$SHA"
        git push --follow-tags --force origin "$TAG_VERSION"
  
        gh_opts=(--generate-notes --latest --target "$SHA" --verify-tag)
        if [ -z "${CURRENT_TAG+x}" ]; then
          gh_opts+=(--notes-start-tag "${CURRENT_TAG:-v0.0.0}")
        fi
        # shellcheck disable=SC2068
        gh release create "$TAG_VERSION" ${gh_opts[@]}

        (
          echo previous_tag="${CURRENT_TAG:-v0.0.0}"
          echo previous_version="${CURRENT_VERSION:-0.0.0}"
          echo tag="$TAG_VERSION"
          echo version="$THIS_VERSION"
          echo sha="$SHA"
        ) >> "$GITHUB_OUTPUT"

  Build:
    name: Build Binaries
    if: needs.Changes.outputs.build_changed == 'true'
    needs:
    - Changes
    - Tag
    runs-on: ubuntu-latest
    permissions:
      contents: 'write'
    strategy:
      matrix:
        goos: [linux, darwin]
        goarch: [amd64, arm64]
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.Tag.outputs.sha }}

    - uses: arnested/go-version-action@v1
      id: go-version

    - name: Install Go ${{ steps.go-version.outputs.minimal }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ steps.go-version.outputs.minimal }}
        check-latest: true

    - name: Build
      id: build
      env:
        BIN: ${{github.repository}}-${{ matrix.goos }}-${{ matrix.goarch }}
        CGO_ENABLED: 0
        GH_TOKEN: ${{ github.token }}
        GOARCH: ${{ matrix.goarch }}
        GOOS: ${{ matrix.goos }}
        TAG: ${{ needs.Tag.outputs.tag }}
      shell: bash
      run: |
        set -e

        go build -o "$BIN"
        gh release upload "$TAG" "$BIN" --clobber

  Image:
    name: Build and Push Docker Image
    if: needs.Changes.outputs.image_changed == 'true'
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.summary.outputs.image }}
    permissions:
      contents: 'read'
      id-token: 'write'
      packages: 'write'
    needs:
      - Changes
      - Tag
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.Tag.outputs.sha }}

    - name: Login to Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ github.token }}

    - name: Image Metadata
      id: metadata
      uses: docker/metadata-action@v5
      env:
        IMAGE_TITLE: "FluxCD Kind of Templater"
        VERSION: ${{ needs.Tag.outputs.version }}
      with:
        images: |
          ${{ env.DOCKER_REPOSITORY }}
        tags: |
          type=raw,enable=true,priority=200,prefix=,suffix=,value=${{ env.VERSION }}
          type=ref,event=pr,prefix=snapshot-pr-,enable=${{ contains(github.event.pull_request.labels.*.name, 'snapshot') }}
          type=pep440,pattern={{version}},enable=${{ startsWith(github.ref, 'refs/tags') }}
        labels:
          org.opencontainers.image.title=${{ env.IMAGE_TITLE }}
          org.opencontainers.image.authors=${{ github.triggering_actor }}

    - name: Setup Docker BuildX
      uses: docker/setup-buildx-action@v3

    - name: Build and Push
      id: docker-build-and-push
      uses: docker/build-push-action@v5
      with:
        context: .
        cache-from: type=gha
        cache-to: type=gha,mode=max
        push: true
        tags: ${{ steps.metadata.outputs.tags }}
        labels: ${{ steps.metadata.outputs.labels }}
        platforms: linux/amd64,linux/arm64

    - name: Summary
      id: summary
      env:
        IMAGE_ID: ${{ steps.docker-build-and-push.outputs.imageid }}
        VERSION: ${{ needs.Tag.outputs.version }}
      shell: bash
      run: |
        set -e

        NL='
        '
        IMAGE="${DOCKER_REPOSITORY%%"$NL"*}:${VERSION}"
        
        echo "image=${IMAGE}" >> "$GITHUB_OUTPUT"

        (
          echo '### Image Created'
          echo "Image: ${IMAGE}"
          echo "Image Id: [${{ env.IMAGE_ID }}](${{ env.IMAGE_ID }})"
          echo "Image Tags: $(docker image inspect --format "{{.RepoTags}}" ${{ env.IMAGE_ID }})"
        ) >> "$GITHUB_STEP_SUMMARY"
